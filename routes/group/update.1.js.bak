const Joi = require('joi');
const Boom = require('boom');
const config = require('../../config.js');
const moment = require('moment')

module.exports = {
    path: '/api/group/update',
    method: 'POST',
    handler(request, reply) {
        const select  = `select * from group_bill where id=${request.payload.id}`;
        request.app.db.query(select, (err, group) => {
            if(err) {
                request.log(['error'], err);
                reply(Boom.serverUnavailable(config.errorMessage));
            } else {

                const update = `update group_bill set top_freight='${request.payload.top_freight?request.payload.top_freight:group[0].top_freight}', private='${request.payload.private?request.payload.private:group[0].private}',status='${request.payload.status?request.payload.status:group[0].status}',province='${request.payload.province?request.payload.province:group[0].province}',city='${request.payload.city?request.payload.city:group[0].city}', flash_desc='${request.payload.flash_desc?request.payload.flash_desc:group[0].flash_desc}', isflash='${request.payload.is_flash?request.payload.isflash:group[0].isflash}',  description='${request.payload.description?request.payload.description:group[0].description}', freight=${request.payload.freight?request.payload.freight:group[0].freight}, pay_description='${request.payload.pay_description?request.payload.pay_description:group[0].pay_description}',pay_name='${request.payload.pay_name?request.payload.pay_name:group[0].pay_name}',pay_count='${request.payload.pay_count?request.payload.pay_count:group[0].pay_count}',pay_type='${request.payload.pay_type?request.payload.pay_type:group[0].pay_type}', contacts='${request.payload.contacts?request.payload.contacts:group[0].contacts}',phone='${request.payload.phone?request.payload.phone:group[0].phone}',end_date=${request.payload.end_date?request.payload.end_date:group[0].end_date},pickup_date=${request.payload.pickup_date?request.payload.pickup_date:group[0].pickup_date}, pickup_address='${request.payload.pickup_address?request.payload.pickup_address:group[0].pickup_address}' where id=${request.payload.id}`;
                request.app.db.query(update, (err, res) => {
                    if(err) {
                        request.log(['error'], err);
                        reply(Boom.serverUnavailable(config.errorMessage));
                    } else {
                        reply(config.ok);
                    }
                });

            }
        });
      
    },
    config: {
        auth: 'jwt',
        description: '根据ID更新团购清单',
        validate: {
            payload: {
                contacts: Joi.string().required().min(2).max(100),
                phone: Joi.string().required().min(2).max(20),
                end_date: Joi.number().required(),
                description: Joi.string().optional().default(" "),
                city: Joi.string().required().default("shc"),
                user_id: Joi.number().required(),
                status: Joi.number().required(),
                id: Joi.number().required(),
                province: Joi.string().optional().default("sh"),
                pickup_address: Joi.string().optional().default(" "),
                pickup_date: Joi.number().optional().default(0),
                pay_type: Joi.string().optional().default(" "),
                pay_count: Joi.string().optional().default(" ").max(20),
                pay_name: Joi.string().optional().default(" ").max(50),
                pay_description: Joi.string().optional().default(" ").max(500),
                freight: Joi.number().optional().default(0.0),
                is_flash: Joi.number().optional().optional().default(0),
                private: Joi.number().optional().default(0),
                flash_desc: Joi.string().optional().default(" ").max(500),
                top_freight:Joi.optional(),
                current_step:Joi.optional()
            }
        },
        pre: [
            {
                method(request, reply) {
                    const select = `select user_id from group_bill where id=${request.payload.id}`;
                    const user = request.auth.credentials;
                    
                    request.app.db.query(select, (err, res) => {
                        if(err) {
                            request.log(['error'], err);
                            reply(Boom.serverUnavailable(config.errorMessage));
                        } else if(res && res[0].user_id == request.payload.user_id || user.type == 'tggly') {
                            reply(true);
                        } else {
                            reply(Boom.notAcceptable('您没有权限更新这个单子'));
                        }
                    });
                }
            },
            {
                method(request, reply) {
                    const select = `select status from group_bill where id=${request.payload.id}`;
                    request.app.db.query(select, (err, res) => {
                        if(err) {
                            request.log(['error'], err);
                            reply(Boom.serverUnavailable(config.errorMessage));
                        } else if(res && res[0].status == 0) {
                            reply(Boom.notAcceptable('已经结束的团购单不能更新'));
                        } else {
                            reply(true);
                        }
                    });
                }
            },
            {
                method(request, reply) {
                    if(moment(request.payload.end_date+"","YYYYMMDDhmmss").isBefore(moment())){
                        reply(Boom.notAcceptable('结束日期小于今天'));
                    } else {
                        reply(true);
                    }
                }
            }
        ]
    }
};

