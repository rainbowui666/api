const Joi = require('joi');
const Boom = require('boom');
const config = require('../../config.js');
const fs = require("fs");

module.exports = {
    path: '/api/material/random/image',
    method: 'GET',
    handler(request, reply) {
        const select = `select id,category,code  from material where classification=${request.query.classification}  order by rand() LIMIT 1`;
        request.app.db.query(select, (err, res) => {
            if(err) {
                request.log(['error'], err);
                reply(Boom.serverUnavailable(config.errorMessage));
            } else {
                if(res&&res[0]&&res[0].category){
                    const filePath = config.material + "/"+res[0].category+"/";
                    const results = [];
                    fs.readdir(filePath,function(err,files){
                        if(err){
                            console.log(err);
                            return;
                        }
                        files.forEach(function(filename){
                            const temp = filename.substring(0,filename.indexOf(".")).split("-");
                            if(res[0].code == temp[1]){
                                results.push( `/${res[0].category}/${filename}`)
                            }
                        });
                        reply({'status':'ok','id':res[0].id,'image':results[0]});
                    });
                }else{
                    reply({'status':'ok'});
                }                    
                
                
            }
        });
    },
    config: {
        description: ' 随机获得生物资料图片',
        validate: {
            query: {
                classification: Joi.number().default(0),
            }
        },
    }
};



const Joi = require('joi');
const Boom = require('boom');
const config = require('../../config.js');
const fs = require("fs");
const _ = require('lodash');

module.exports = {
    path: '/api/material/random/imageList',
    method: 'GET',
    handler(request, reply) {
        const ranNum = 40;
        const categoryList = ['hy'];
        const resultList = [];

        _.each(categoryList,(category)=>{
            const temp = [];
            const tempResult = [];
            const files = fs.readdirSync(config.material+ "/"+category+"/");
            files.forEach(function(filename){
                const obj = {};
                obj.pic = "/"+category+"/"+filename;
                obj.code = filename.substring(0,filename.indexOf(".")).split("-")[1];
                temp.push(obj)
            });

            for (let i = 0; i < ranNum; i++) {
                const ran = Math.floor(Math.random() * (temp.length - i));
                tempResult.push(temp[ran]);
                temp[ran] = temp[temp.length - i - 1];
            };

            resultList.push(tempResult);
        })
        
        const returnMap = {};
        const hyObj = resultList[0];
        const hy = [" ("];
        _.each(hyObj,(item)=>{
            hy.push("'"+item.code+"',");
        });
        hy.push("'a') ");
        
        const hyselect = `select id,name,code  from material where classification=0 and category='hy' and code in ${hy.join("")}`;
        request.app.db.query(hyselect, (err, hyres) => {
            if(err) {
                request.log(['error'], err);
                reply(Boom.serverUnavailable(config.errorMessage));
            } else {
                _.each(hyres,(hyre)=>{
                    const item = _.find(hyObj,(obj)=>{
                        return obj.code == hyre.code;
                    });
                    item.key = hyre.id;
                    item.name = hyre.name;
                })

                const  result = [];
                const  size= 10;

                for (let x = 0; x < Math.ceil(hyObj.length / size); x++) {
                         let start = x * size;
                         let end = start + size;
                         result.push(hyObj.slice(start, end));
                }

                returnMap['1']=result[0];
                returnMap['2']=result[1];
                returnMap['3']=result[2];
                returnMap['4']=result[3];

                reply(returnMap);
            }
        });
    },
    config: {
        description: ' 随机获得生物资料图片',
        validate: {
            query: {
                classification: Joi.number().default(0)
            }
        },
    }
};
